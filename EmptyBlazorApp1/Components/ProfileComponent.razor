@using MudBlazor
@using EmptyBlazorApp1.Entities
@using EmptyBlazorApp1.Services

@inject AuthenticationService AuthenticationService
@inject IJSRuntime Js

@switch (_userDataAction) {
    case UserDataAction.View:
        <UserProfileDataViewComponent UserProfile="@_userProfile" EditButtonOnClick="SwitchToEdit"/>
        break;
    case UserDataAction.Edit:
        <UserProfileDataEditComponent UserProfile="@_userProfile" OnClose="() => {AuthenticationService.SaveChanges(); SwitchToView();}"/>
        break;
}

<MudPaper Class="pa-4 mx-2">
    <MudButton OnClick="LogoutButtonOnClick" FullWidth="true" Variant="Variant.Outlined" Color="Color.Secondary">Выйти из аккаунта</MudButton>
</MudPaper>

@code {
    User? _user;
    UserProfile? _userProfile;
    UserDataAction _userDataAction = UserDataAction.View;

    enum UserDataAction {
        View,
        Edit
    }

    void SwitchToEdit() {
        _userDataAction = UserDataAction.Edit;
        StateHasChanged();
    }

    void SwitchToView() {
        _userDataAction = UserDataAction.View;
        StateHasChanged();
    }

    protected override void OnInitialized() {
        base.OnInitialized();
        _user = AuthenticationService.GetUserWithProfile();
        _userProfile = _user?.UserProfile;
    }

    async Task LogoutButtonOnClick() {
        await Js.InvokeVoidAsync("deleteCookie", AuthenticationService.SessionIdCode);
        await Js.InvokeVoidAsync("reloadPage");
    }

}