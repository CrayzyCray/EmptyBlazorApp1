@using MudBlazor
@using EmptyBlazorApp1.Entities
@using EmptyBlazorApp1.Services

@inject AuthenticationService AuthenticationService
@inject DbService Db

<CascadingValue TValue="Action<Community>" Value="OpenCommunityMenu">
    <CascadingValue Value="_selectedTags">
        <MudStack Spacing="2" Class="pa-2">
            <MudText Typo="Typo.h5" Align="Align.Center">Сообщества</MudText>
            <MudDivider/>
            <MudSelect T="Type" @bind-Value="@_componentType" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter">
                <MudSelectItem Value="typeof(All)">Все сообщества</MudSelectItem>
                <MudSelectItem Value="typeof(Subscriptions)" Disabled="!AuthenticationService.IsAuthorized()">Подписки</MudSelectItem>
                <MudSelectItem Value="typeof(Created)" Disabled="!AuthenticationService.IsAuthorized()">Созданные</MudSelectItem>
            </MudSelect>

            <MudSelect T="CommunityHashTag" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter" MultiSelection SelectedValuesChanged="TagSelectedChanges">
                @foreach (var tag in _availableTags) {
                    <MudSelectItem Value="@tag">@tag.Name</MudSelectItem>
                }
            </MudSelect>
            <DynamicComponent Type="@_componentType" Parameters="@_componentsParameters.GetValueOrDefault(_componentType)"/>
        </MudStack>
    </CascadingValue>
</CascadingValue>

@code {

    [CascadingParameter]
    public AppNavManager NavManager { get; set; }

    [Parameter]
    public List<CommunityHashTag>? SelectedTags { get; set; }

    [Parameter]
    public Type? StartPage { get; set; }

    private Type _componentType = typeof(All);
    private Dictionary<Type, Dictionary<string, object>> _componentsParameters = new();
    private List<CommunityHashTag> _selectedTags = new();
    private List<CommunityHashTag> _availableTags = new();

    protected override void OnParametersSet() {
        _selectedTags = SelectedTags ?? _selectedTags;
        _availableTags = Db.GetAvailableCommunityHashTags();
    }

    void OpenCommunityMenu(Community community) {
        NavManager.NavigateTo(typeof(Info.Info), new Dictionary<string, object> { { "Community", community } });
    }

    void TagSelectedChanges(IEnumerable<CommunityHashTag> selected) {
        _selectedTags = new(selected);
    }

}