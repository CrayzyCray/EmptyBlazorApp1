@using MudBlazor
@using EmptyBlazorApp1.Entities
@using EmptyBlazorApp1.Services

@inject AuthenticationService AuthenticationService
@inject IJSRuntime Js

@switch (_currentPage) {
    case Pages.Profile:
        @switch (_userDataAction) {
            case UserDataAction.View:
                <UserProfileDataView UserProfile="@_userProfile" EditButtonOnClick="SwitchToEdit" />
                break;
            case UserDataAction.Edit:
                <UserProfileDataEdit UserProfile="@_userProfile" OnClose="() => {AuthenticationService.SaveChanges(); SwitchToView();}" />
                break;
        }

        <MudPaper Class="pa-4 mx-2 mb-2">
            <MudStack>
                <MudButton Variant="Variant.Filled" Color="Color.Primary" FullWidth="true" OnClick="NavigateToCommunities">Сообщества</MudButton>
                <MudButton Variant="Variant.Filled" Color="Color.Primary" FullWidth="true">Подписки</MudButton>
            </MudStack>
        </MudPaper>

        <MudPaper Class="pa-4 mx-2">
            <MudButton OnClick="LogoutButtonOnClick" FullWidth="true" Variant="Variant.Outlined" Color="Color.Secondary">Выйти из аккаунта</MudButton>
        </MudPaper>
        break;
    case Pages.Communities:
        <Communities/>
        break;
}



@code {
    User? _user;
    UserProfile? _userProfile;
    UserDataAction _userDataAction = UserDataAction.View;
    Pages _currentPage = Pages.Profile;

    enum UserDataAction {
        View,
        Edit
    }

    enum Pages {
        Profile,
        Communities,
    }

    void NavigateToCommunities() {
        _currentPage = Pages.Communities;
        StateHasChanged();
    }

    void SwitchToEdit() {
        _userDataAction = UserDataAction.Edit;
        StateHasChanged();
    }

    void SwitchToView() {
        _userDataAction = UserDataAction.View;
        StateHasChanged();
    }

    protected override void OnInitialized() {
        base.OnInitialized();
        _user = AuthenticationService.GetUserWithProfile();
        _userProfile = _user?.UserProfile;
    }

    async Task LogoutButtonOnClick() {
        await Js.InvokeVoidAsync("deleteCookie", AuthenticationService.SessionIdCode);
        await Js.InvokeVoidAsync("reloadPage");
    }

}