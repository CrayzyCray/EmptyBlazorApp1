@page "/"
@using Microsoft.AspNetCore.Components.Web
@namespace EmptyBlazorApp1.Pages
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers

<!DOCTYPE html>
<html lang="en">
<head>
    <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no"/>
    <meta charset="utf-8"/>
    <base href="~/"/>

    <link href="https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap" rel="stylesheet"/>
    <link href="_content/MudBlazor/MudBlazor.min.css" rel="stylesheet"/>

    <link href="css/site.css" rel="stylesheet"/>
    <component type="typeof(HeadOutlet)" render-mode="ServerPrerendered"/>
</head>
<body>
<component type="typeof(App)" render-mode="ServerPrerendered"/>

<div id="blazor-error-ui">
    <environment include="Staging,Production">
        An error has occurred. This application may no longer respond until reloaded.
    </environment>
    <environment include="Development">
        An unhandled exception has occurred. See browser dev tools for details.
    </environment>
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>

<script src="_framework/blazor.server.js"></script>
<script src="/_framework/aspnetcore-browser-refresh.js"></script>
<script src="_content/MudBlazor/MudBlazor.min.js"></script>
<script>    
    function setCookieMy(name, value) {
          document.cookie = name + "=" + value + "; secure;";
    }
    function getCookieValue(key) {
      // Get the document.cookie string
      let cookieString = document.cookie;
      // Split the cookie string by semicolons into an array of key-value pairs
      let cookieArray = cookieString.split(";");
      // Loop through the cookie array
      for (let i = 0; i < cookieArray.length; i++) {
        // Trim any leading or trailing spaces from the current pair
        let pair = cookieArray[i].trim();
        // Split the pair by the equal sign into an array of key and value
        let keyValue = pair.split("=");
        // If the key matches the parameter, return the value
        if (keyValue[0] === key) {
          return keyValue[1];
        }
      }
      // If no match is found, return null
      return null;
    }
</script>

</body>
</html>
@{
    var e = this.HttpContext;
    //Console.WriteLine("_Host.cshtml");
}