@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@using MudBlazor
@using EmptyBlazorApp1.Services
@using EmptyBlazorApp1.Entities
@using System.Security.Cryptography;
@using System.Text;

@inject DbService dbService


<MudTabs Elevation="4" Rounded="true" Centered="true" ApplyEffectsToContainer="true" PanelClass="pa-6">
    <MudTabPanel Text="Login">
        <MudStack>
            <MudTextField @bind-Value="Login" Label="Login" Variant="Variant.Filled"></MudTextField>
            <MudTextField @bind-Value="Password" Label="Password" Variant="Variant.Filled"></MudTextField>
            <MudButton OnClick="LoginButtonOnClick" Variant="Variant.Filled" Color="Color.Primary">Login</MudButton>
        </MudStack>
    </MudTabPanel>
    <MudTabPanel Text="Register">
        <MudStack>
            <MudTextField @bind-Value="Login" Label="Login" Variant="Variant.Filled"></MudTextField>
            <MudTextField @bind-Value="Password" Label="Password" Variant="Variant.Filled"></MudTextField>
            <MudButton OnClick="RegisterButtonOnClick" Variant="Variant.Filled" Color="Color.Primary">Register</MudButton>
        </MudStack>
    </MudTabPanel>
</MudTabs>

@code {
    [Parameter]
    public Action<User>? action { get; set; }
    public string Login { get; set; } = string.Empty;
    public string Password { get; set; } = string.Empty;

    private void LoginButtonOnClick() {
        var user = dbService.DbContext.Users.FirstOrDefault(u => u.Login == Login);
        if (user is null)
            return;

        action?.Invoke(user);

        Console.WriteLine(Login);
    }

    private void RegisterButtonOnClick() {
        string salt = GenerateSalt();
        var hash = GenerateSaltedHash(Password, salt);



        var user = new User() { Login = Login, Password = hash, Salt = salt };
        dbService.DbContext.Users.Add(user);
        dbService.DbContext.SaveChanges();
    }

    string GenerateSalt() {
        string salt;
        using (var cryptoProvider = new RNGCryptoServiceProvider()) {
            byte[] bytes = new byte[8];
            cryptoProvider.GetBytes(bytes);

            salt = Convert.ToBase64String(bytes);
        }
        return salt;
    }

    byte[] GenerateSaltedHash(string password, string salt) {
        var a = SHA256.Create();
        var hash = a.ComputeHash(Encoding.UTF8.GetBytes(password + salt));
        a.Dispose();
        return hash;
    }

    bool ValidatePassword(string password, string salt, byte[] passwordHash) {
        var _hash = GenerateSaltedHash(password, salt);
        return passwordHash.SequenceEqual(_hash);
    }

}