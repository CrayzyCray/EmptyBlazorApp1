@page "/"

@using EmptyBlazorApp1.Services
@using EmptyBlazorApp1.Components.Misc
@using EmptyBlazorApp1.Components.Calendar
@using EmptyBlazorApp1.Components.Profile
@using EmptyBlazorApp1.Components.Communities
@using EmptyBlazorApp1.Components

@inject AuthenticationService AuthenticationService
@inject IDialogService DialogService

<DynamicComponent Type="@_currentComponentType" Parameters="@_componentsParameters.GetValueOrDefault(_currentComponentType)" />

<MudAppBar Elevation="0" Bottom="true">
    <MudIconButton Class="flex-grow-1"
                   Icon="@Icons.Material.Filled.Dashboard"
                   Color="_currentComponentType == typeof(Communities) ? Color.Primary : Color.Default"
                   OnClick="NavigateToCommunities" />
    <MudIconButton Class="flex-grow-1"
                   Icon="@Icons.Material.Filled.CalendarToday"
                   Color="_currentComponentType == typeof(Calendar) ? Color.Primary : Color.Default"
                   OnClick="NavigateToCalendar"/>
    <MudIconButton Class="flex-grow-1"
                   Icon="@Icons.Material.Filled.AccountCircle"
                   Color="_currentComponentType == typeof(Profile) ? Color.Primary : Color.Default"
                   OnClick="NavigateToProfile"/>
</MudAppBar>

@code {
    private Dictionary<Type, Dictionary<string, object>> _componentsParameters = new();
    DynamicComponent? dynamicComponent;
    private Type _currentComponentType = typeof(Communities);

    void NavigateToCommunities() {
        _currentComponentType = typeof(Communities);
    }

    void NavigateToCalendar() {
        _currentComponentType = typeof(Calendar);
    }

    void NavigateToLogin() {
        _currentComponentType = typeof(Login);
    }

    void NavigateToProfile() {
        if (AuthenticationService.IsAuthorized()) {
            _currentComponentType = typeof(Profile);
        }
        else {
            var parameters = new DialogParameters<Dialog>();
            parameters.Add("ContentText", "Для просмотра этой страницы требуется регистрация");
            parameters.Add("ButtonText", "Регистрация");
            parameters.Add("Callback", () => {
                NavigateToLogin();
                StateHasChanged();
            });
            DialogService.Show<Dialog>("Требуется регистрация", parameters);
        }
    }

    protected override void OnInitialized() {
        _componentsParameters =new() { 
            { 
                typeof(Login), 
                new() { 
                    { "Callback", () => { NavigateToProfile(); StateHasChanged(); } } 
                } 
            }
        };
    }
}