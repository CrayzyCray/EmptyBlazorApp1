@page "/"

@using EmptyBlazorApp1.Services
@using EmptyBlazorApp1.Components.Misc
@using EmptyBlazorApp1.Components.Calendar
@using EmptyBlazorApp1.Components.Profile
@using EmptyBlazorApp1.Components

@inject AuthenticationService AuthenticationService
@inject IDialogService DialogService

<MudStack Class="mb-56" Spacing="0">
    @switch (currentPage) {
        case Pages.Calendar:
            <Calendar/>
            break;
        case Pages.Communities:
            <Communities/>
            break;
        case Pages.Profile:
            <Profile/>
            break;
        case Pages.Login:
            <Login Callback="@_loginComponentCallback"/>
            break;
    }
    <MudElement Class="mb-16"/>
</MudStack>

<MudAppBar Elevation="0" Bottom="true">
    <MudIconButton Class="flex-grow-1"
                   Icon="@Icons.Material.Filled.Dashboard"
                   Color="currentPage == Pages.Communities ? Color.Primary : Color.Default"
                   OnClick="NavigateToCommunities" />
    <MudIconButton
        Class="flex-grow-1"
        Icon="@Icons.Material.Filled.CalendarToday"
        Color="currentPage == Pages.Calendar ? Color.Primary : Color.Default"
        OnClick="NavigateToCalendar"/>
    <MudIconButton
        Class="flex-grow-1"
        Icon="@Icons.Material.Filled.AccountCircle"
        Color="currentPage == Pages.Profile ? Color.Primary : Color.Default"
        OnClick="NavigateToProfile"/>
</MudAppBar>

@code {
    Action? _loginComponentCallback;
    [Parameter]
    public string? pageParam { get; set; } = null;

    enum Pages {
        Calendar,
        Communities,
        Profile,
        Login
    }

    void NavigateToCommunities() {
        Navigate(Pages.Communities);
    }

    void NavigateToCalendar() {
        Navigate(Pages.Calendar);
    }

    void NavigateToLogin() {
        Navigate(Pages.Login);
    }

    void NavigateToProfile() {
        if (AuthenticationService.IsAuthorized()) {
            Navigate(Pages.Profile);
        }
        else {
            
            var parameters = new DialogParameters<Dialog>();
            parameters.Add("ContentText", "Для просмотра этой страницы требуется регистрация");
            parameters.Add("ButtonText", "Регистрация");
            parameters.Add("Callback", () => {
                                           _loginComponentCallback = () => Navigate(Pages.Profile);
                                           NavigateToLogin();
                                       });
            DialogService.Show<Dialog>("Требуется регистрация", parameters);
        }
    }

    Pages currentPage = Pages.Calendar;

    void Navigate(Pages page) {
        if (page == currentPage) {
            return;
        }
        currentPage = page;
        StateHasChanged();
    }

    void TryNavigate(Pages page) {
        if (currentPage == page) {
            return;
        }
        
        switch (page) {
            case Pages.Profile:
                NavigateToProfile();
            break;
            case Pages.Login:
                NavigateToLogin();
            break;
            case Pages.Calendar:
                NavigateToCalendar();
            break;
            case Pages.Communities:
                NavigateToCommunities();
            break;
        }
    }

    protected override void OnParametersSet() {
        if (pageParam != null && Enum.TryParse(pageParam, out Pages pg)) {
            TryNavigate(pg);
        }
    }

}