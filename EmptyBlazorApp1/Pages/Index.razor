@page "/"

@using EmptyBlazorApp1.Services
@using EmptyBlazorApp1.Components.Misc
@using EmptyBlazorApp1.Components.Calendar
@using EmptyBlazorApp1.Components.Profile
@using EmptyBlazorApp1.Components.Communities
@using EmptyBlazorApp1.Components

@inject AuthenticationService AuthenticationService
@inject IDialogService DialogService

<CascadingValue Value="_navManager">
    <DynamicComponent Type="@_currentPageType" Parameters="_currentParameters"/>
</CascadingValue>

<MudAppBar Elevation="0" Bottom="true">
    <MudIconButton Class="flex-grow-1"
                   Icon="@Icons.Material.Filled.Dashboard"
                   Color="_currentPageType == typeof(Communities) ? Color.Primary : Color.Default"
                   OnClick="NavigateToCommunities"/>
    <MudIconButton Class="flex-grow-1"
                   Icon="@Icons.Material.Filled.CalendarToday"
                   Color="_currentPageType == typeof(Calendar) ? Color.Primary : Color.Default"
                   OnClick="NavigateToCalendar"/>
    <MudIconButton Class="flex-grow-1"
                   Icon="@Icons.Material.Filled.AccountCircle"
                   Color="_currentPageType == typeof(Profile) ? Color.Primary : Color.Default"
                   OnClick="NavigateToProfile"/>
</MudAppBar>

@code {
    private IDictionary<string, object>? _currentParameters;
    private Type _currentPageType = typeof(Communities);
    private AppNavigationManager _navManager;

    void NavigateToCommunities() {
        _navManager.ClearHistory();
        _navManager.NavigateTo(typeof(Communities));
    }

    void NavigateToCalendar() {
        _navManager.ClearHistory();
        _navManager.NavigateTo(typeof(Calendar));
    }

    void NavigateToProfile() {
        if (AuthenticationService.IsAuthorized()) {
            _navManager.ClearHistory();
            _navManager.NavigateTo(typeof(Profile));
        }
        else {
            var parameters = new DialogParameters<Dialog>();
            parameters.Add("ContentText", "Для просмотра этой страницы требуется регистрация");
            parameters.Add("ButtonText", "Регистрация");
            parameters.Add("Callback", () => _navManager.NavigateTo(typeof(Login)));
            DialogService.Show<Dialog>("Требуется регистрация", parameters);
        }
    }

    protected override void OnInitialized() {
        _navManager = new(_currentPageType, (page, parameters) => {
            _currentPageType = page;
            _currentParameters = parameters;
            StateHasChanged();
        });
    }

}