@page "/"

@using EmptyBlazorApp1.Services
@using EmptyBlazorApp1.Components.Misc
@using EmptyBlazorApp1.Components.Calendar
@using EmptyBlazorApp1.Components.Profile
@using EmptyBlazorApp1.Components.Communities
@using EmptyBlazorApp1.Components

@inject AuthenticationService AuthenticationService
@inject IDialogService DialogService
@inject NavManager NavManager

<DynamicComponent Type="@_currentPageType" Parameters="_currentParameters"/>

<MudAppBar Elevation="0" Bottom="true">
    <MudIconButton Class="flex-grow-1"
                   Icon="@Icons.Material.Filled.Dashboard"
                   Color="_currentPageType == typeof(Communities) ? Color.Primary : Color.Default"
                   OnClick="NavigateToCommunities"/>
    <MudIconButton Class="flex-grow-1"
                   Icon="@Icons.Material.Filled.CalendarToday"
                   Color="_currentPageType == typeof(Calendar) ? Color.Primary : Color.Default"
                   OnClick="NavigateToCalendar"/>
    <MudIconButton Class="flex-grow-1"
                   Icon="@Icons.Material.Filled.AccountCircle"
                   Color="_currentPageType == typeof(Profile) ? Color.Primary : Color.Default"
                   OnClick="NavigateToProfile"/>
</MudAppBar>

@code {
    private IDictionary<string, object>? _currentParameters;
    private Type _currentPageType = typeof(Calendar);

    void NavigateToCommunities() {
        NavManager.NavigateTo(typeof(Communities));
    }

    void NavigateToCalendar() {
        NavManager.NavigateTo(typeof(Calendar));
    }

    void NavigateToProfile() {
        if (AuthenticationService.IsAuthorized()) {
            NavManager.NavigateTo(typeof(Profile));
            return;
        }

        var parameters = new DialogParameters<Dialog> {
            { "ContentText", "Для просмотра этой страницы требуется регистрация" },
            { "ButtonText", "Регистрация" },
            { "Callback", () => NavManager.NavigateTo(typeof(Login)) }
        };
        DialogService.Show<Dialog>("Требуется регистрация", parameters);
    }

    protected override void OnParametersSet() {
        NavManager.Initialize(
            _currentPageType,
            (page, parameters) => {
                _currentPageType = page;
                _currentParameters = parameters;
                StateHasChanged();
            });
    }

}