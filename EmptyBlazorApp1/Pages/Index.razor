@page "/"
@using MudBlazor
@using EmptyBlazorApp1.Services
@using EmptyBlazorApp1.Components
@inject AccountService AccountService
@inject IDialogService DialogService
@inject IJSRuntime JS

<MudAppBar Elevation="1" Bottom="true">
    <MudSpacer />
    <MudIconButton Icon="@Icons.Material.Filled.CalendarToday" OnClick="NavigateToCalendar"/>
    <MudIconButton Icon="@Icons.Material.Filled.Dashboard" OnClick="NavigateToCommunities"/>
    <MudIconButton Icon="@Icons.Material.Filled.AccountCircle" OnClick="NavigateToLogined"/>
    <MudSpacer />
</MudAppBar>

@{
    switch (currentPage) {
        case Pages.Calendar:
            <CalendarComponent/>
            break;
        case Pages.Communities:
            <CommunitiesComponent/>
            break;
        case Pages.Login:
            <LoginComponent Callback="@loginComponentCallback"/>
            break;
        case Pages.Logined:
            <LoginedComponent/>
            break;
        default:
            break;
    }
}

    @* <MudText>Index page</MudText>
    <MudNavLink Href="login">Login</MudNavLink>
    <MudNavLink Href="logined">Logined</MudNavLink>
    <MudNavLink Href="mainmenu">MainMenu</MudNavLink>

    <MudButton OnClick="SetPls">Set PLS</MudButton>
    <MudButton OnClick="GetPls">Read PLS</MudButton>

    <MudButton OnClick="a1">a1</MudButton>
    <MudButton OnClick="a2">a2</MudButton> *@



@code {
    Action? loginComponentCallback = null;

    enum Pages {
        Calendar,
        Communities,
        Login,
        Logined
    }

    void NavigateToCommunities() {
        Navigate(Pages.Communities);
    }

    void NavigateToCalendar() {
        Navigate(Pages.Calendar);
    }

    void NavigateToLogin() {
        var page = currentPage;
        loginComponentCallback = () => Navigate(page);
        Navigate(Pages.Login);
    }

    void NavigateToLogined() {
        if (AccountService.IsAuthorized()) {
            Navigate(Pages.Logined);
        } else {
            var parameters = new DialogParameters<Dialog>();
            parameters.Add("ContentText", "Для просмотра этой страницы требуется регистрация");
            parameters.Add("ButtonText", "Регистрация");
            parameters.Add("Callback", () => NavigateToLogin());
            DialogService.Show<Dialog>("Требуется регистрация", parameters);
        }
    }

    Pages currentPage = Pages.Calendar;

    void Navigate(Pages page) {
        if (page == currentPage) {
            return;
        }
        currentPage = page;
        StateHasChanged();
    }
}